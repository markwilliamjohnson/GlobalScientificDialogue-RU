Traceback (most recent call last):
  File "c:\users\markw\anaconda3\lib\site-packages\jupyter_cache\executors\utils.py", line 56, in single_nb_execution
    record_timing=False,
  File "c:\users\markw\anaconda3\lib\site-packages\nbclient\client.py", line 1112, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "c:\users\markw\anaconda3\lib\site-packages\nbclient\util.py", line 74, in wrapped
    return just_run(coro(*args, **kwargs))
  File "c:\users\markw\anaconda3\lib\site-packages\nbclient\util.py", line 53, in just_run
    return loop.run_until_complete(coro)
  File "c:\users\markw\anaconda3\lib\asyncio\base_events.py", line 583, in run_until_complete
    return future.result()
  File "c:\users\markw\anaconda3\lib\site-packages\nbclient\client.py", line 554, in async_execute
    cell, index, execution_count=self.code_cells_executed + 1
  File "c:\users\markw\anaconda3\lib\site-packages\nbclient\client.py", line 857, in async_execute_cell
    self._check_raise_for_error(cell, exec_reply)
  File "c:\users\markw\anaconda3\lib\site-packages\nbclient\client.py", line 760, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
from neo4j import GraphDatabase

class HelloWorldExample:

    def __init__(self, uri, user, password):
        self.driver = GraphDatabase.driver(uri, auth=(user, password))

    def close(self):
        self.driver.close()

    def print_greeting(self, message):
        with self.driver.session() as session:
            greeting = session.write_transaction(self._create_and_return_greeting, message)
            print(greeting)

    @staticmethod
    def _create_and_return_greeting(tx, message):
        result = tx.run("CREATE (a:Greeting) "
                        "SET a.message = $message "
                        "RETURN a.message + ', from node ' + id(a)", message=message)
        return result.single()[0]


greeter = HelloWorldExample("bolt://localhost:7687", "neo4j", "bollocks")
greeter.print_greeting("hello, world")
greeter.close()
------------------

[1;31m---------------------------------------------------------------------------[0m
[1;31mConnectionRefusedError[0m                    Traceback (most recent call last)
[1;32m~\Anaconda3\lib\site-packages\neo4j\io\__init__.py[0m in [0;36m_connect[1;34m(resolved_address, timeout, keep_alive)[0m
[0;32m    934[0m         [0mlog[0m[1;33m.[0m[0mdebug[0m[1;33m([0m[1;34m"[#0000]  C: <OPEN> %s"[0m[1;33m,[0m [0mresolved_address[0m[1;33m)[0m[1;33m[0m[1;33m[0m[0m
[1;32m--> 935[1;33m         [0ms[0m[1;33m.[0m[0mconnect[0m[1;33m([0m[0mresolved_address[0m[1;33m)[0m[1;33m[0m[1;33m[0m[0m
[0m[0;32m    936[0m         [0ms[0m[1;33m.[0m[0msettimeout[0m[1;33m([0m[0mt[0m[1;33m)[0m[1;33m[0m[1;33m[0m[0m

[1;31mConnectionRefusedError[0m: [WinError 10061] No connection could be made because the target machine actively refused it

During handling of the above exception, another exception occurred:

[1;31mServiceUnavailable[0m                        Traceback (most recent call last)
[1;32m<ipython-input-1-4aeed0c60f37>[0m in [0;36m<module>[1;34m[0m
[0;32m     22[0m [1;33m[0m[0m
[0;32m     23[0m [1;33m[0m[0m
[1;32m---> 24[1;33m [0mgreeter[0m [1;33m=[0m [0mHelloWorldExample[0m[1;33m([0m[1;34m"bolt://localhost:7687"[0m[1;33m,[0m [1;34m"neo4j"[0m[1;33m,[0m [1;34m"bollocks"[0m[1;33m)[0m[1;33m[0m[1;33m[0m[0m
[0m[0;32m     25[0m [0mgreeter[0m[1;33m.[0m[0mprint_greeting[0m[1;33m([0m[1;34m"hello, world"[0m[1;33m)[0m[1;33m[0m[1;33m[0m[0m
[0;32m     26[0m [0mgreeter[0m[1;33m.[0m[0mclose[0m[1;33m([0m[1;33m)[0m[1;33m[0m[1;33m[0m[0m

[1;32m<ipython-input-1-4aeed0c60f37>[0m in [0;36m__init__[1;34m(self, uri, user, password)[0m
[0;32m      4[0m [1;33m[0m[0m
[0;32m      5[0m     [1;32mdef[0m [0m__init__[0m[1;33m([0m[0mself[0m[1;33m,[0m [0muri[0m[1;33m,[0m [0muser[0m[1;33m,[0m [0mpassword[0m[1;33m)[0m[1;33m:[0m[1;33m[0m[1;33m[0m[0m
[1;32m----> 6[1;33m         [0mself[0m[1;33m.[0m[0mdriver[0m [1;33m=[0m [0mGraphDatabase[0m[1;33m.[0m[0mdriver[0m[1;33m([0m[0muri[0m[1;33m,[0m [0mauth[0m[1;33m=[0m[1;33m([0m[0muser[0m[1;33m,[0m [0mpassword[0m[1;33m)[0m[1;33m)[0m[1;33m[0m[1;33m[0m[0m
[0m[0;32m      7[0m [1;33m[0m[0m
[0;32m      8[0m     [1;32mdef[0m [0mclose[0m[1;33m([0m[0mself[0m[1;33m)[0m[1;33m:[0m[1;33m[0m[1;33m[0m[0m

[1;32m~\Anaconda3\lib\site-packages\neo4j\__init__.py[0m in [0;36mdriver[1;34m(cls, uri, auth, **config)[0m
[0;32m    179[0m [1;33m[0m[0m
[0;32m    180[0m         [1;32mif[0m [0mdriver_type[0m [1;33m==[0m [0mDRIVER_BOLT[0m[1;33m:[0m[1;33m[0m[1;33m[0m[0m
[1;32m--> 181[1;33m             [1;32mreturn[0m [0mcls[0m[1;33m.[0m[0mbolt_driver[0m[1;33m([0m[0mparsed[0m[1;33m.[0m[0mnetloc[0m[1;33m,[0m [0mauth[0m[1;33m=[0m[0mauth[0m[1;33m,[0m [1;33m**[0m[0mconfig[0m[1;33m)[0m[1;33m[0m[1;33m[0m[0m
[0m[0;32m    182[0m         [1;32melif[0m [0mdriver_type[0m [1;33m==[0m [0mDRIVER_NEO4j[0m[1;33m:[0m[1;33m[0m[1;33m[0m[0m
[0;32m    183[0m             [0mrouting_context[0m [1;33m=[0m [0mparse_routing_context[0m[1;33m([0m[0mparsed[0m[1;33m.[0m[0mquery[0m[1;33m)[0m[1;33m[0m[1;33m[0m[0m

[1;32m~\Anaconda3\lib\site-packages\neo4j\__init__.py[0m in [0;36mbolt_driver[1;34m(cls, target, auth, **config)[0m
[0;32m    192[0m [1;33m[0m[0m
[0;32m    193[0m         [1;32mtry[0m[1;33m:[0m[1;33m[0m[1;33m[0m[0m
[1;32m--> 194[1;33m             [1;32mreturn[0m [0mBoltDriver[0m[1;33m.[0m[0mopen[0m[1;33m([0m[0mtarget[0m[1;33m,[0m [0mauth[0m[1;33m=[0m[0mauth[0m[1;33m,[0m [1;33m**[0m[0mconfig[0m[1;33m)[0m[1;33m[0m[1;33m[0m[0m
[0m[0;32m    195[0m         [1;32mexcept[0m [1;33m([0m[0mBoltHandshakeError[0m[1;33m,[0m [0mBoltSecurityError[0m[1;33m)[0m [1;32mas[0m [0merror[0m[1;33m:[0m[1;33m[0m[1;33m[0m[0m
[0;32m    196[0m             [1;32mfrom[0m [0mneo4j[0m[1;33m.[0m[0mexceptions[0m [1;32mimport[0m [0mServiceUnavailable[0m[1;33m[0m[1;33m[0m[0m

[1;32m~\Anaconda3\lib\site-packages\neo4j\__init__.py[0m in [0;36mopen[1;34m(cls, target, auth, **config)[0m
[0;32m    355[0m         [0maddress[0m [1;33m=[0m [0mcls[0m[1;33m.[0m[0mparse_target[0m[1;33m([0m[0mtarget[0m[1;33m)[0m[1;33m[0m[1;33m[0m[0m
[0;32m    356[0m         [0mpool_config[0m[1;33m,[0m [0mdefault_workspace_config[0m [1;33m=[0m [0mConfig[0m[1;33m.[0m[0mconsume_chain[0m[1;33m([0m[0mconfig[0m[1;33m,[0m [0mPoolConfig[0m[1;33m,[0m [0mWorkspaceConfig[0m[1;33m)[0m[1;33m[0m[1;33m[0m[0m
[1;32m--> 357[1;33m         [0mpool[0m [1;33m=[0m [0mBoltPool[0m[1;33m.[0m[0mopen[0m[1;33m([0m[0maddress[0m[1;33m,[0m [0mauth[0m[1;33m=[0m[0mauth[0m[1;33m,[0m [0mpool_config[0m[1;33m=[0m[0mpool_config[0m[1;33m,[0m [0mworkspace_config[0m[1;33m=[0m[0mdefault_workspace_config[0m[1;33m)[0m[1;33m[0m[1;33m[0m[0m
[0m[0;32m    358[0m         [1;32mreturn[0m [0mcls[0m[1;33m([0m[0mpool[0m[1;33m,[0m [0mdefault_workspace_config[0m[1;33m)[0m[1;33m[0m[1;33m[0m[0m
[0;32m    359[0m [1;33m[0m[0m

[1;32m~\Anaconda3\lib\site-packages\neo4j\io\__init__.py[0m in [0;36mopen[1;34m(cls, address, auth, pool_config, workspace_config)[0m
[0;32m    508[0m [1;33m[0m[0m
[0;32m    509[0m         [0mpool[0m [1;33m=[0m [0mcls[0m[1;33m([0m[0mopener[0m[1;33m,[0m [0mpool_config[0m[1;33m,[0m [0mworkspace_config[0m[1;33m,[0m [0maddress[0m[1;33m)[0m[1;33m[0m[1;33m[0m[0m
[1;32m--> 510[1;33m         [0mseeds[0m [1;33m=[0m [1;33m[[0m[0mpool[0m[1;33m.[0m[0macquire[0m[1;33m([0m[1;33m)[0m [1;32mfor[0m [0m_[0m [1;32min[0m [0mrange[0m[1;33m([0m[0mpool_config[0m[1;33m.[0m[0minit_size[0m[1;33m)[0m[1;33m][0m[1;33m[0m[1;33m[0m[0m
[0m[0;32m    511[0m         [0mpool[0m[1;33m.[0m[0mrelease[0m[1;33m([0m[1;33m*[0m[0mseeds[0m[1;33m)[0m[1;33m[0m[1;33m[0m[0m
[0;32m    512[0m         [1;32mreturn[0m [0mpool[0m[1;33m[0m[1;33m[0m[0m

[1;32m~\Anaconda3\lib\site-packages\neo4j\io\__init__.py[0m in [0;36m<listcomp>[1;34m(.0)[0m
[0;32m    508[0m [1;33m[0m[0m
[0;32m    509[0m         [0mpool[0m [1;33m=[0m [0mcls[0m[1;33m([0m[0mopener[0m[1;33m,[0m [0mpool_config[0m[1;33m,[0m [0mworkspace_config[0m[1;33m,[0m [0maddress[0m[1;33m)[0m[1;33m[0m[1;33m[0m[0m
[1;32m--> 510[1;33m         [0mseeds[0m [1;33m=[0m [1;33m[[0m[0mpool[0m[1;33m.[0m[0macquire[0m[1;33m([0m[1;33m)[0m [1;32mfor[0m [0m_[0m [1;32min[0m [0mrange[0m[1;33m([0m[0mpool_config[0m[1;33m.[0m[0minit_size[0m[1;33m)[0m[1;33m][0m[1;33m[0m[1;33m[0m[0m
[0m[0;32m    511[0m         [0mpool[0m[1;33m.[0m[0mrelease[0m[1;33m([0m[1;33m*[0m[0mseeds[0m[1;33m)[0m[1;33m[0m[1;33m[0m[0m
[0;32m    512[0m         [1;32mreturn[0m [0mpool[0m[1;33m[0m[1;33m[0m[0m

[1;32m~\Anaconda3\lib\site-packages\neo4j\io\__init__.py[0m in [0;36macquire[1;34m(self, access_mode, timeout, database)[0m
[0;32m    521[0m     [1;32mdef[0m [0macquire[0m[1;33m([0m[0mself[0m[1;33m,[0m [0maccess_mode[0m[1;33m=[0m[1;32mNone[0m[1;33m,[0m [0mtimeout[0m[1;33m=[0m[1;32mNone[0m[1;33m,[0m [0mdatabase[0m[1;33m=[0m[1;32mNone[0m[1;33m)[0m[1;33m:[0m[1;33m[0m[1;33m[0m[0m
[0;32m    522[0m         [1;31m# The access_mode and database is not needed for a direct connection, its just there for consistency.[0m[1;33m[0m[1;33m[0m[1;33m[0m[0m
[1;32m--> 523[1;33m         [1;32mreturn[0m [0mself[0m[1;33m.[0m[0m_acquire[0m[1;33m([0m[0mself[0m[1;33m.[0m[0maddress[0m[1;33m,[0m [0mtimeout[0m[1;33m)[0m[1;33m[0m[1;33m[0m[0m
[0m[0;32m    524[0m [1;33m[0m[0m
[0;32m    525[0m [1;33m[0m[0m

[1;32m~\Anaconda3\lib\site-packages\neo4j\io\__init__.py[0m in [0;36m_acquire[1;34m(self, address, timeout)[0m
[0;32m    393[0m                     [0mtimeout[0m [1;33m=[0m [0mmin[0m[1;33m([0m[0mself[0m[1;33m.[0m[0mpool_config[0m[1;33m.[0m[0mconnection_timeout[0m[1;33m,[0m [0mtime_remaining[0m[1;33m([0m[1;33m)[0m[1;33m)[0m[1;33m[0m[1;33m[0m[0m
[0;32m    394[0m                     [1;32mtry[0m[1;33m:[0m[1;33m[0m[1;33m[0m[0m
[1;32m--> 395[1;33m                         [0mconnection[0m [1;33m=[0m [0mself[0m[1;33m.[0m[0mopener[0m[1;33m([0m[0maddress[0m[1;33m,[0m [0mtimeout[0m[1;33m)[0m[1;33m[0m[1;33m[0m[0m
[0m[0;32m    396[0m                     [1;32mexcept[0m [0mServiceUnavailable[0m[1;33m:[0m[1;33m[0m[1;33m[0m[0m
[0;32m    397[0m                         [0mself[0m[1;33m.[0m[0mremove[0m[1;33m([0m[0maddress[0m[1;33m)[0m[1;33m[0m[1;33m[0m[0m

[1;32m~\Anaconda3\lib\site-packages\neo4j\io\__init__.py[0m in [0;36mopener[1;34m(addr, timeout)[0m
[0;32m    505[0m [1;33m[0m[0m
[0;32m    506[0m         [1;32mdef[0m [0mopener[0m[1;33m([0m[0maddr[0m[1;33m,[0m [0mtimeout[0m[1;33m)[0m[1;33m:[0m[1;33m[0m[1;33m[0m[0m
[1;32m--> 507[1;33m             [1;32mreturn[0m [0mBolt[0m[1;33m.[0m[0mopen[0m[1;33m([0m[0maddr[0m[1;33m,[0m [0mauth[0m[1;33m=[0m[0mauth[0m[1;33m,[0m [0mtimeout[0m[1;33m=[0m[0mtimeout[0m[1;33m,[0m [1;33m**[0m[0mpool_config[0m[1;33m)[0m[1;33m[0m[1;33m[0m[0m
[0m[0;32m    508[0m [1;33m[0m[0m
[0;32m    509[0m         [0mpool[0m [1;33m=[0m [0mcls[0m[1;33m([0m[0mopener[0m[1;33m,[0m [0mpool_config[0m[1;33m,[0m [0mworkspace_config[0m[1;33m,[0m [0maddress[0m[1;33m)[0m[1;33m[0m[1;33m[0m[0m

[1;32m~\Anaconda3\lib\site-packages\neo4j\io\__init__.py[0m in [0;36mopen[1;34m(cls, address, auth, timeout, **pool_config)[0m
[0;32m    193[0m             [0mcustom_resolver[0m[1;33m=[0m[0mpool_config[0m[1;33m.[0m[0mresolver[0m[1;33m,[0m[1;33m[0m[1;33m[0m[0m
[0;32m    194[0m             [0mssl_context[0m[1;33m=[0m[0mpool_config[0m[1;33m.[0m[0mget_ssl_context[0m[1;33m([0m[1;33m)[0m[1;33m,[0m[1;33m[0m[1;33m[0m[0m
[1;32m--> 195[1;33m             [0mkeep_alive[0m[1;33m=[0m[0mpool_config[0m[1;33m.[0m[0mkeep_alive[0m[1;33m,[0m[1;33m[0m[1;33m[0m[0m
[0m[0;32m    196[0m         )
[0;32m    197[0m [1;33m[0m[0m

[1;32m~\Anaconda3\lib\site-packages\neo4j\io\__init__.py[0m in [0;36mconnect[1;34m(address, timeout, custom_resolver, ssl_context, keep_alive)[0m
[0;32m   1053[0m         [1;32mraise[0m [0mServiceUnavailable[0m[1;33m([0m[1;34m"Failed to resolve addresses for %s"[0m [1;33m%[0m [0maddress[0m[1;33m)[0m[1;33m[0m[1;33m[0m[0m
[0;32m   1054[0m     [1;32melse[0m[1;33m:[0m[1;33m[0m[1;33m[0m[0m
[1;32m-> 1055[1;33m         [1;32mraise[0m [0mlast_error[0m[1;33m[0m[1;33m[0m[0m
[0m
[1;32m~\Anaconda3\lib\site-packages\neo4j\io\__init__.py[0m in [0;36mconnect[1;34m(address, timeout, custom_resolver, ssl_context, keep_alive)[0m
[0;32m   1043[0m         [1;32mtry[0m[1;33m:[0m[1;33m[0m[1;33m[0m[0m
[0;32m   1044[0m             [0mhost[0m [1;33m=[0m [0maddress[0m[1;33m[[0m[1;36m0[0m[1;33m][0m[1;33m[0m[1;33m[0m[0m
[1;32m-> 1045[1;33m             [0ms[0m [1;33m=[0m [0m_connect[0m[1;33m([0m[0mresolved_address[0m[1;33m,[0m [0mtimeout[0m[1;33m,[0m [0mkeep_alive[0m[1;33m)[0m[1;33m[0m[1;33m[0m[0m
[0m[0;32m   1046[0m             [0ms[0m [1;33m=[0m [0m_secure[0m[1;33m([0m[0ms[0m[1;33m,[0m [0mhost[0m[1;33m,[0m [0mssl_context[0m[1;33m)[0m[1;33m[0m[1;33m[0m[0m
[0;32m   1047[0m             [1;32mreturn[0m [0m_handshake[0m[1;33m([0m[0ms[0m[1;33m,[0m [0maddress[0m[1;33m)[0m[1;33m[0m[1;33m[0m[0m

[1;32m~\Anaconda3\lib\site-packages\neo4j\io\__init__.py[0m in [0;36m_connect[1;34m(resolved_address, timeout, keep_alive)[0m
[0;32m    947[0m         [0mlog[0m[1;33m.[0m[0mdebug[0m[1;33m([0m[1;34m"[#0000]  C: <CLOSE> %s"[0m[1;33m,[0m [0mresolved_address[0m[1;33m)[0m[1;33m[0m[1;33m[0m[0m
[0;32m    948[0m         [0ms[0m[1;33m.[0m[0mclose[0m[1;33m([0m[1;33m)[0m[1;33m[0m[1;33m[0m[0m
[1;32m--> 949[1;33m         [1;32mraise[0m [0mServiceUnavailable[0m[1;33m([0m[1;34m"Failed to establish connection to {!r} (reason {})"[0m[1;33m.[0m[0mformat[0m[1;33m([0m[0mresolved_address[0m[1;33m,[0m [0merror[0m[1;33m)[0m[1;33m)[0m[1;33m[0m[1;33m[0m[0m
[0m[0;32m    950[0m     [1;32melse[0m[1;33m:[0m[1;33m[0m[1;33m[0m[0m
[0;32m    951[0m         [1;32mreturn[0m [0ms[0m[1;33m[0m[1;33m[0m[0m

[1;31mServiceUnavailable[0m: Failed to establish connection to IPv4Address(('127.0.0.1', 7687)) (reason [WinError 10061] No connection could be made because the target machine actively refused it)
ServiceUnavailable: Failed to establish connection to IPv4Address(('127.0.0.1', 7687)) (reason [WinError 10061] No connection could be made because the target machine actively refused it)

